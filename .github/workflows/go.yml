name: Go Backend Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        CGO_ENABLED=0 GOOS=linux go build -o main

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build for Linux
      run: |
        go mod download
        go mod tidy
        CGO_ENABLED=0 GOOS=linux go build -o main

    - name: Deploy to VPS
      env:
        INPUT_HOST: ${{ secrets.VPS_HOST }}
        INPUT_USERNAME: ${{ secrets.VPS_USERNAME }}
        INPUT_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        INPUT_PORT: "22"
        INPUT_SOURCE: "main,routes/*,go.*"
        INPUT_TARGET: "/var/www/aureocloud/backend"
        INPUT_TIMEOUT: "30s"
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        source: "main,routes/*,go.*"
        target: "/var/www/aureocloud/backend"
        strip_components: 0
        debug: true

    - name: Start Application
      env:
        INPUT_HOST: ${{ secrets.VPS_HOST }}
        INPUT_USERNAME: ${{ secrets.VPS_USERNAME }}
        INPUT_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        INPUT_PORT: "22"
        INPUT_TIMEOUT: "30s"
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: |
          cd /var/www/aureocloud/backend
          go mod download
          go mod tidy
          chmod +x main
          
          # Create systemd service
          echo "[Unit]
          Description=Aureo HMS Backend
          After=network.target

          [Service]
          Type=simple
          User=root
          WorkingDirectory=/var/www/aureocloud/backend
          ExecStart=/var/www/aureocloud/backend/main
          Restart=always
          Environment=GIN_MODE=release

          [Install]
          WantedBy=multi-user.target" > /etc/systemd/system/aureobackend.service
          
          # Reload and restart service
          systemctl daemon-reload
          systemctl enable aureobackend
          systemctl restart aureobackend
